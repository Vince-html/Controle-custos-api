name: CI - Testes Java

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 Checkout do código
        uses: actions/checkout@v4

      - name: 🔧 Configurar o JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  
          java-version: '23'      
          cache: maven             

      - name: 📦 Construir, rodar testes e verificar cobertura
        run: mvn clean verify -DskipTests=false -DfailIfNoTests=false

      - name: ✅ Exibir cobertura de código
        if: always()
        run: |
          total_missed=$(grep -oP '(?<=<counter type="LINE" missed=")[0-9]+' target/site/jacoco/jacoco.xml | awk '{sum+=$1} END {print sum}')
          total_covered=$(grep -oP '(?<=<counter type="LINE" covered=")[0-9]+' target/site/jacoco/jacoco.xml | awk '{sum+=$1} END {print sum}')
      
          # Se total_covered estiver vazio, define como 0
          total_missed=${total_missed:-0}
          total_covered=${total_covered:-0}
          total_lines=$((total_missed + total_covered))
      
          if [ "$total_lines" -eq 0 ]; then
            echo "❌ Nenhuma linha de código foi analisada. Cobertura: 0%"
            exit 1
          else
            coverage=$(awk "BEGIN {printf \"%.2f\", ($total_covered / $total_lines) * 100}")
            echo "✅ Cobertura Total: $coverage%"
      
            # Se cobertura for menor que 80%, falha o pipeline
            min_coverage=80
            if (( $(echo "$coverage < $min_coverage" | bc -l) )); then
              echo "❌ Cobertura abaixo do esperado! ($coverage% < $min_coverage%)"
              exit 1
            fi
          fi
      - name: 📢 Notificar falha (opcional)
        if: failure()
        run: echo "Os testes falharam ou a cobertura foi insuficiente! Verifique os logs acima."
